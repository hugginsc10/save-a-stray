import { ValidationRule, SDLValidationRule } from 'graphql/validation/ValidationContext';

// Spec Section: "Executable Definitions"
import { ExecutableDefinitions } from 'graphql/validation/rules/ExecutableDefinitions';

// Spec Section: "Operation Name Uniqueness"
import { UniqueOperationNames } from 'graphql/validation/rules/UniqueOperationNames';

// Spec Section: "Lone Anonymous Operation"
import { LoneAnonymousOperation } from 'graphql/validation/rules/LoneAnonymousOperation';

// Spec Section: "Subscriptions with Single Root Field"
import { SingleFieldSubscriptions } from 'graphql/validation/rules/SingleFieldSubscriptions';

// Spec Section: "Fragment Spread Type Existence"
import { KnownTypeNames } from 'graphql/validation/rules/KnownTypeNames';

// Spec Section: "Fragments on Composite Types"
import { FragmentsOnCompositeTypes } from 'graphql/validation/rules/FragmentsOnCompositeTypes';

// Spec Section: "Variables are Input Types"
import { VariablesAreInputTypes } from 'graphql/validation/rules/VariablesAreInputTypes';

// Spec Section: "Leaf Field Selections"
import { ScalarLeafs } from 'graphql/validation/rules/ScalarLeafs';

// Spec Section: "Field Selections on Objects, Interfaces, and Unions Types"
import { FieldsOnCorrectType } from 'graphql/validation/rules/FieldsOnCorrectType';

// Spec Section: "Fragment Name Uniqueness"
import { UniqueFragmentNames } from 'graphql/validation/rules/UniqueFragmentNames';

// Spec Section: "Fragment spread target defined"
import { KnownFragmentNames } from 'graphql/validation/rules/KnownFragmentNames';

// Spec Section: "Fragments must be used"
import { NoUnusedFragments } from 'graphql/validation/rules/NoUnusedFragments';

// Spec Section: "Fragment spread is possible"
import { PossibleFragmentSpreads } from 'graphql/validation/rules/PossibleFragmentSpreads';

// Spec Section: "Fragments must not form cycles"
import { NoFragmentCycles } from 'graphql/validation/rules/NoFragmentCycles';

// Spec Section: "Variable Uniqueness"
import { UniqueVariableNames } from 'graphql/validation/rules/UniqueVariableNames';

// Spec Section: "All Variable Used Defined"
import { NoUndefinedVariables } from 'graphql/validation/rules/NoUndefinedVariables';

// Spec Section: "All Variables Used"
import { NoUnusedVariables } from 'graphql/validation/rules/NoUnusedVariables';

// Spec Section: "Directives Are Defined"
import { KnownDirectives } from 'graphql/validation/rules/KnownDirectives';

// Spec Section: "Directives Are Unique Per Location"
import { UniqueDirectivesPerLocation } from 'graphql/validation/rules/UniqueDirectivesPerLocation';

// Spec Section: "Argument Names"
import {
  KnownArgumentNames,
  KnownArgumentNamesOnDirectives, // @internal
} from 'graphql/validation/rules/KnownArgumentNames';

// Spec Section: "Argument Uniqueness"
import { UniqueArgumentNames } from 'graphql/validation/rules/UniqueArgumentNames';

// Spec Section: "Value Type Correctness"
import { ValuesOfCorrectType } from 'graphql/validation/rules/ValuesOfCorrectType';

// Spec Section: "Argument Optionality"
import {
  ProvidedRequiredArguments,
  ProvidedRequiredArgumentsOnDirectives, // @internal
} from 'graphql/validation/rules/ProvidedRequiredArguments';

// Spec Section: "All Variable Usages Are Allowed"
import { VariablesInAllowedPosition } from 'graphql/validation/rules/VariablesInAllowedPosition';

// Spec Section: "Field Selection Merging"
import { OverlappingFieldsCanBeMerged } from 'graphql/validation/rules/OverlappingFieldsCanBeMerged';

// Spec Section: "Input Object Field Uniqueness"
import { UniqueInputFieldNames } from 'graphql/validation/rules/UniqueInputFieldNames';

/**
 * This set includes all validation rules defined by the GraphQL spec.
 *
 * The order of the rules in this list has been adjusted to lead to the
 * most clear output when encountering multiple validation errors.
 */
export const specifiedRules: ReadonlyArray<ValidationRule>;

import { LoneSchemaDefinition } from 'graphql/validation/rules/LoneSchemaDefinition';

// @internal
export const specifiedSDLRules: ReadonlyArray<SDLValidationRule>;
